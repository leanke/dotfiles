filetype: cython

detect:
    filename: "(\\.pyx$)"

rules:

    - identifier: "\\b[A-Z_][0-9A-Z_]+\\b"  # Match constant-style identifiers (typically macros)

    - identifier.c.variable: "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s?\\{.*\\}\\b"  # Match struct variable names
    - identifier.c.variable: "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s?\\[.*\\]\\b"  # Match array variable names
    - identifier.c.reference: "\\&\\s?([a-zA-Z_][a-zA-Z0-9_]*)"  # Match reference operators
    - identifier.c.pointer: "\\*\\s?([a-zA-Z_][a-zA-Z0-9_]*)"  # Match pointer variable identifiers
    - identifier.c.typedef: "([A-Z][a-zA-Z0-9_]*)"
    - identifier.c.def: "\\bdefine\\s+[A-Z][A-Z_]*"
    - identifier.c.function: "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s?\\("  # Match function names before parentheses
    - identifier.c.enum_member: "\\b[A-Z_][A-Z0-9_]*\\b"  # Enums and constant names
    - identifier.c.struct_member: "->[a-zA-Z_][a-zA-Z0-9_]*\\b"  # Match struct members (arrow notation)
    - identifier.c.struct_member: "\\.[a-zA-Z_][a-zA-Z0-9_]*\\b"  # Match struct members (dot notation)
    - identifier.c.enum: "\\benum\\s+[a-zA-Z_][a-zA-Z0-9_]*\\b"  # Match enum declarations
    - identifier.c.union: "\\bunion\\s+[a-zA-Z_][a-zA-Z0-9_]*\\b"  # Match union declarations
    - identifier.c.typedef: "\\btypedef\\s+(struct|union|enum)\\s+[a-zA-Z_][a-zA-Z0-9_]*\\s+[a-zA-Z_][a-zA-Z0-9_]*\\b"  # Typedef for named struct, union, or enum with typedef name
    - identifier.c.typedef: "\\btypedef\\s+(struct|union|enum)\\s+([a-zA-Z_][a-zA-Z0-9_]*\\s*)?\\{[^}]*\\}\\s+[a-zA-Z_][a-zA-Z0-9_]*\\b"  # Typedef for struct, union, or enum (anonymous or named)
    - identifier.c.typedef: "[A-Z][a-zA-Z0-9_]* "
    - identifier.c.struct: "\\bstruct\\s+[a-zA-Z_][a-zA-Z0-9_]*\\b"  # Match struct declarations
    - identifier.c.struct: "[a-zA-Z_][a-zA-Z_0-9]*\\* "
    - identifier.c.struct.func: "[a-zA-Z_][a-zA-Z_0-9]*\\->"
    - identifier.c.struct.func: "[a-zA-Z_][a-zA-Z_0-9]*\\."

    - identifier.python.function.var: "\\b([a-zA-Z_][a-zA-Z_0-9]*)\\s*="  # Variable assignments in function scope
    - identifier.python.class.attribute2: "\\b\\.([a-z][a-zA-Z_0-9]*)\\b"  # Identifies attributes (self. attribute)
    - identifier.python.class.attribute: "\\b(\\w+)\\.(\\w+)\\b"  # Identifies attributes (self. attribute)
    - identifier.python.function: "\\b([a-z_][a-zA-Z_0-9]*)\\("  # Matches standalone functions like print()
    - identifier.python.class: "\\b\\s+2([a-z][a-zA-Z_0-9]*)\\."  # Highlight "self" keyword in methods 
    - identifier.python.class.method: "\\bdef\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*\\(self"  # Matches method names inside a class      
    - identifier.python.class: "\\bclass\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\b"  # Matches class definitions 
    - identifier.python.class: "\\b([A-Z][a-zA-Z_0-9]*)\\s*\\("  # Matches class definitions with inheritance 
    - identifier.python.self: "\\b(self)\\b"  # Highlight "self" keyword in methods   
    - identifier.python.import: "\\b(import|from)\\s+([a-zA-Z_][a-zA-Z_0-9]*)"  # Import statements like import os
    - identifier.python.as: "\\b(as)\\s+([a-zA-Z_][a-zA-Z_0-9]*)"  # Import statements  

    - identifier.cython.pointer: "\\*\\s?([a-zA-Z_][a-zA-Z0-9_]*)"  # Match pointer variable identifiers
    - identifier.cython.reference: "\\&\\s?([a-zA-Z_][a-zA-Z0-9_]*)"  # Match reference operators
    - identifier.cython.function: "\\b([a-z_][a-zA-Z0-9_]*)\\s?\\("  # Match function names before parentheses



    - type: "\\b(_Atomic|_BitInt|float|double|_Decimal32|_Decimal64|_Decimal128|_Complex|complex|_Imaginary|imaginary|_Bool|bool|char|int|short|long|enum|void|struct|union|typedef|typeof|typeof_unqual|(un)?signed|inline|_Noreturn)\\b"
    - type: "\\b((s?size)|((u_?)?int(8|16|32|64|ptr))|char(8|16|32)|wchar)_t\\b"
    - type: "\\b(_Float16|__fp16|_Float32|_Float32x|_Float64|_Float64x|__float80|_Float128|_Float128x|__float128|__ibm128|__int128|_Fract|_Sat|_Accum)\\b"
    - type: "\\b[a-z_][0-9a-z_]+(_t|_T)\\b"
    - type: "\\b(object|class|int|float|str|bool|complex|None|list|dict|tuple|set|frozenset|bytes|bytearray)\\b"  # Python types

    - statement: "\\b(cdef|cpdef|cimport|ctypedef|nogil|gil|except|public|api)\\b"
    - statement: "\\b(def|return|yield|raise|import|from|try|except|finally|with|as|global|nonlocal)\\b"  # Python control flow keywords
    - statement: "\\b(if|elif|else|for|while|break|continue|pass)\\b"  # Control structures like if/else/for
    - statement: "\\b(is|in|not|and|or|assert)\\b"  # Logical and comparison operators
    - statement: "\\b(auto|volatile|register|restrict|_Alignas|alignas|_Alignof|alignof|static|const|constexpr|extern|_Thread_local|thread_local)\\b"
    - statement: "\\b(for|if|while|do|else|case|default|switch|_Generic|_Static_assert|static_assert)\\b"
    - statement: "\\b(goto|continue|break|return)\\b"
    - statement: "\\b(asm|fortran)\\b"

    - preproc: "^[[:space:]]*#[[:space:]]*(define|embed|pragma|include|(un|ifn?)def|endif|el(if|ifdef|ifndef|se)|if|line|warning|error|__has_include|__has_embed|__has_c_attribute)"
    - preproc: "^[[:space:]]*_Pragma\\b"

    - statement: "__attribute__[[:space:]]*\\(\\([^)]*\\)\\)"
    - statement: "__(aligned|asm|builtin|extension|hidden|inline|packed|restrict|section|typeof|weak)__"

    - preproc: "^[[:space:]]*#\\s*(import|from|define|ifdef|endif|pragma|error|warn)"  # Preprocessor-like directives (e.g., imports)
    - symbol.operator: "[-+*/%=<>.:;,~&|^!?]|\\b(offsetof|sizeof)\\b"
    - symbol.brackets: "[(){}]|\\[|\\]"
    - constant.number: "(\\b([1-9][0-9]*|0[0-7]*|0[Xx][0-9A-Fa-f]+|0[Bb][01]+)([Uu][Ll]?[Ll]?|[Ll][Ll]?[Uu]?)?\\b)"
    - constant.number: "(\\b(([0-9]*[.][0-9]+|[0-9]+[.][0-9]*)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)[FfLl]?\\b)"
    - constant.number: "(\\b0[Xx]([0-9A-Za-z]*[.][0-9A-Za-z]+|[0-9A-Za-z]+[.][0-9A-Za-z]*)[Pp][+-]?[0-9]+[FfLl]?\\b)"
    - constant.bool: "(\\b(true|false|NULL|nullptr|TRUE|FALSE)\\b)"

    - constant.string:
        start: "\""
        end: "\""
        skip: "\\\\."
        rules:
            - constant.specialChar: "\\\\([\"'abfnrtv\\\\]|[0-3]?[0-7]{1,2}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})"

    - constant.string:
        start: "'"
        end: "'"
        skip: "\\\\."
        rules:
            - error: "..+"
            - constant.specialChar: "\\\\([\"'abfnrtv\\\\]|[0-3]?[0-7]{1,2}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})"

    - comment:
        start: "//"
        end: "$"
        rules:
            - todo: "(TODO|XXX|FIXME):?"

    - comment:
        start: "/\\*"
        end: "\\*/"
        rules:
            - todo: "(TODO|XXX|FIXME):?"
